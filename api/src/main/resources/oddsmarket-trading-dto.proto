syntax = "proto3";
package com.aspiralimited.oddsmarket.api.v4.websocket.trading.dto;

option java_outer_classname = "OddsmarketTradingDto";

/**
 * Server->Client message envelope.
 */
message ServerMessage {
  /**
   * Incremental message number within the session.
   * It's guaranteed that there are no gaps in the sequence of message numbers.
   */
  uint64 messageId = 1;
  oneof message {
    SessionInit dataInit = 2;
    EventFull eventFull = 3;
    EventDelta eventDelta = 4;
    EventDelete eventDelete = 5;
    InitialStateTransferred initialStateTransferred = 6;
    Pong pong = 7;
    Heartbeat heartbeat = 8;
    Error error = 9;
  }
}

/**
 * Client->Server message envelope.
 */
message ClientMessage {
  oneof message {
    Acknowledge acknowledge = 1;
    Ping ping = 2;
  }
}

/**
 * Acknowledge message. Must be sent by the client at least every 1000 milliseconds.
 */
message Acknowledge {
  /**
   * The messageId of the last DataMessage that was successfully received and processed by the client.
   */
  uint64 messageId = 1;
}

/**
 * Ping message. May be sent by the client at any time.
 */
message Ping {
  /**
   * Optional payload that may be used to identify the original Ping message.
   */
  string payload = 1;
}

/**
 * Pong message. Sent by the server in response to a Ping message.
 */
message Pong {
  /**
   * Server timestamp in milliseconds since epoch.
   */
  uint64 timestamp = 1;
  /**
   * A copy of the payload from the original Ping message.
   */
  string payload = 2;
}

/**
 * Heartbeat message. Sent by the server every N milliseconds and may be used for computing consumer lag.
 */
message Heartbeat {
  /**
   * Server timestamp in milliseconds since epoch.
   */
  uint64 timestamp = 1;
}

/**
 * Error message. Sent by the server in case of an error.
 */
message Error {
  /**
   * Error code.
   */
  ErrorCode code = 1;
  /**
   * Error message.
   */
  string message = 2;
}

/**
 * Initial session information message.
 * Sent only if authentication is successful and feed access is granted.
 * If any error occurs during initial user authentication or permissions verification, the Error message is sent to client.
 */
message SessionInit {
  /**
   * Session ID. May be used to restore the connection in case of a disconnect.
   */
  string sessionId = 1;
}

/**
 * Message sent by the server when the initial data transfer of all events is complete.
 */
message InitialStateTransferred {
}

/**
 * Full initial state of an event (match).
 */
message EventFull {
  /**
   * Unique identifier of the event.
   */
  uint64 eventId = 1;
  /**
   * Properties of the event.
   */
  EventProperties eventProperties = 2;
  /**
   * Live properties of the event, if available.
   */
  optional LiveEventProperties liveEventProperties = 3;
  /**
   * Full list of markets associated with the event.
   */
  repeated MarketFull markets = 4;
}

/**
 * Full market information, including market key, properties, and outcomes.
 */
message MarketFull {
  /**
   * Unique key identifying the market.
   */
  MarketKey marketKey = 1;
  /**
   * Properties of the market.
   */
  MarketProperties marketProperties = 2;
  /**
   * List of full outcome details.
   */
  repeated OutcomeFull outcomes = 3;
}

/**
 * Full outcome information, including outcome key and outcome data.
 */
message OutcomeFull {
  /**
   * Unique key identifying the outcome.
   */
  OutcomeKey outcomeKey = 1;
  /**
   * Data related to the outcome.
   */
  OutcomeData outcomeData = 2;
}

/**
 * Outcome data containing odds and maximum stake.
 */
message OutcomeData {
  /**
   * Odds for the outcome.
   */
  float odds = 1;
  /**
   * Maximum stake allowed for the outcome.
   */
  float maxStake = 4;
}

/**
 * Delta message for event updates, containing modifications to event properties and markets.
 */
message EventDelta {
  /**
   * Unique identifier of the event.
   */
  uint64 eventId = 1;
  /**
   * Updated event properties, if any.
   * If eventProperties is not present, then the eventProperties is not modified.
   */
  optional EventProperties eventProperties = 2;
  /**
   * Updated live event properties, if any.
   * If liveEventProperties is not present, then the liveEventProperties is not modified.
   */
  optional LiveEventProperties liveEventProperties = 3;
  /**
   * List of modified markets.
   * Markets are identified by their MarketKey.
   * New markets should be added to the list, and existing markets should be replaced.
   * If new market state comes with empty list of outcomes, then the market should be removed.
   */
  repeated MarketFull modifiedMarkets = 4;
}

/**
 * Delta message for events deletion.
 */
message EventDelete {
  /**
   * Unique identifiers of the events to be deleted.
   */
  repeated uint64 eventIds = 1;
}

/**
 * Core data types.
 */

/**
 * Properties of an event.
 */
message EventProperties {
  /**
   * Identifier of the sport.
   */
  uint32 sportId = 2;
  /**
   * Home team information.
   */
  Team home = 3;
  /**
   * Away team information.
   */
  Team away = 4;
  /**
   * League information.
   */
  League league = 5;
  /**
   * Name of the event.
   */
  string name = 6;
  /**
   * Planned start datetime in milliseconds since epoch.
   */
  uint64 plannedStartDatetime = 7;
  /**
    * Match ID, which is equal for live and prematch events, and can be used to link live and prematch event records.
    * May change in rare cases.
   */
  uint64 uniformEventId = 8;

  /**
   * Event type.
   */
  EventType eventType = 9;
}

/**
 * Team information including identifier and name.
 */
message Team {
  /**
   * Unique identifier of the team.
   */
  uint64 id = 1;
  /**
   * Name of the team.
   */
  string name = 2;
}

/**
 * League information including identifier, name, and region id.
 */
message League {
  /**
   * Unique identifier of the league.
   */
  uint64 id = 1;
  /**
   * Name of the league.
   */
  string name = 2;
  /**
   * Identifier of the region.
   * The dictionary of regions endpoint documentation:
   * https://github.com/AspiraLimited/oddsmarket_client/wiki/Get-Countries-(API-v4)
   */
  uint32 regionId = 3;
}

/**
 * Unique key for an outcome, including market and bet type id, parameter, period identifier, and optional players.
 */
message OutcomeKey {
  /**
   * Identifier for the "market and bet type". Bet type may also be referred as "selection".
   * "Market and bet type" identifies valid pair of market and bet type (selection).
   * The dictionary endpoint documentation:
   * https://github.com/AspiraLimited/oddsmarket_client/wiki/MarketAndBetType-dictionary-(API-v4)
   */
  uint32 marketAndBetTypeId = 1;
  /**
   * Parameter for the market and bet type.
   * More information is available in documentation:
   * https://github.com/AspiraLimited/oddsmarket_client/wiki/MarketAndBetType-parameter-(API-v4)
   */
  float marketAndBetTypeParam = 2;
  /**
   * Period identifier.
   * More info:
   * https://github.com/AspiraLimited/oddsmarket_client/wiki/Get-Period-Name-(API-v4)
   */
  int32 periodIdentifier = 3;
  /**
   * Optional first player associated with the outcome.
   */
  optional Player player1 = 4;
  /**
   * Optional second player associated with the outcome.
   */
  optional Player player2 = 5;
}

/**
 * Player information including identifier and name.
 */
message Player {
  /**
   * Unique identifier of the player.
   */
  uint32 id = 1;
  /**
   * Name of the player.
   */
  string name = 2;
}

/**
 * Unique key for a market, including market id, parameter, and period identifier.
 */
message MarketKey {
  /**
   * Identifier of the market.
   */
  uint32 marketId = 1;
  /**
   * Parameter for the market.
   */
  float marketParam = 2;
  /**
   * Period identifier.
   */
  int32 periodIdentifier = 3;
}

/**
 * Properties of a market.
 */
message MarketProperties {
  /**
   * Title of the market.
   */
  string title = 1;
  /**
   * Short title of the market.
   */
  string shortTitle = 2;
  /**
   * Group to which the market belongs.
   */
  MarketGroup marketGroup = 3;
  /**
   * Indicates if the market requires a parameter.
   */
  bool requiresParameter = 4;
  /**
   * Score type associated with the market.
   */
  ScoreType scoreType = 5;
}

/**
 * Current state of a live match.
 */
message LiveEventProperties {
  /**
   * Current period identifier (may be not available).
   */
  optional int32 currentPeriodIdentifier = 1;
  /**
   * Current second of the match (may be not available).
   */
  optional int32 currentSecond = 2;
  /**
   * Current live match status (may be not available).
   */
  optional LiveMatchStatus matchStatus = 3;
  /**
   * Current scores, broken down by period and score type.
   */
  repeated DeepScore scores = 4;
}

/**
 * Deep score information including score key and home/away scores.
 */
message DeepScore {
  /**
   * Key identifying the deep score.
   */
  DeepScoreKey scoreKey = 1;
  /**
   * Home team score.
   */
  int32 home = 3;
  /**
   * Away team score.
   */
  int32 away = 4;
}

/**
 * Key for deep scores, including score type and period identifier.
 */
message DeepScoreKey {
  /**
   * Score type.
   */
  ScoreType scoreType = 1;
  /**
   * Period identifier.
   */
  int32 periodIdentifier = 2;
}

/**
 * Enums.
 */

/**
 * Enumeration of market groups.
 */
enum MarketGroup {
  _1_X_2_AND_ML = 0;
  HANDICAP = 1;
  TOTAL = 2;
  IND_TOTAL = 3;
  STATISTIC = 4;
  ADDITIONAL_MARKETS = 5;
  GAME_WINNER = 6;
  /** Group for corner markets. Original enum name was changed to avoid collision with other enum's CORNERS entry. */
  CORNERS_GROUP = 7;
  /** Group for cards markets. Original enum name was changed to avoid collision with other enum's CARDS entry. */
  CARDS_GROUP = 8;
  PLAYER_PROPS = 9;
}

enum EventType {
  REGULAR = 0;
  RACE = 1;
  FIELDS = 2;
  OUTRIGHT = 3;
}

/**
 * Enumeration of live match statuses.
 */
enum LiveMatchStatus {
  /** Status not determined. */
  UNKNOWN = 0;
  /** The event has not started yet. */
  NOT_STARTED = 1;
  /** The event has been postponed. The organizer is determining whether to reschedule or cancel. */
  POSTPONED = 3;
  /** The event has been cancelled. */
  CANCELLED = 5;
  /** The event is live. */
  LIVE = 10;
  /** The event is paused for reasons other than a break. */
  PAUSED = 11;
  /** The event is on break. */
  BREAK = 12;
  /**
   * The event is suspended; the organizer will decide later if it will be postponed, cancelled, or proceed as scheduled.
   */
  SUSPENDED = 13;
  /**
   * The event has been interrupted. If resumed within 48 hours, bets are settled with the final result; otherwise, bets are void.
   */
  INTERRUPTED = 15;
  /** The event is finished. */
  FINISHED = 20;
}

/**
 * Enumeration of score types.
 */
enum ScoreType {
  UNKNOWN_SCORE_TYPE = 0;
  /** Main score. */
  MAIN = 1;
  /** Score for corner kicks. */
  CORNERS = 2;
  /** Score for yellow cards. */
  YELLOW_CARDS = 3;
  /** Score for red cards. */
  RED_CARDS = 4;
  /**
   * Count of penalties awarded during the match (periodIdentifier=0) or during overtime (periodIdentifier=-4).
   * Penalties played at the end of the match to determine the winner are included in ScoreType=MAIN with periodIdentifier=-5.
   */
  PENALTY = 5;
  /** Score for substitutions. */
  SUBSTITUTION = 6;
  /** Score for shots on goal. */
  SHOTS_ON_GOAL = 7;
  /** Score for fouls. */
  FOULS = 8;
  /** Score for offsides. */
  OFFSIDE = 9;
  /** Score for ball possession. */
  BALL_POSSESSION = 10;
  /** Score for cards. */
  CARDS = 11;
  /** Score for booking points (points for cards). */
  BOOKING_POINTS = 12;
  /** Score for aces. */
  ACE = 13;
  /** Score for double faults. */
  DOUBLE_FAULT = 14;
  /** Score for first serve percentage. */
  FIRST_SERVE_PCT = 15;
  /** Score for three-pointers. */
  THREE_POINTS = 16;
  /** Score for rebounds. */
  REBOUNDS = 17;
  /** Score for assists. */
  ASSISTS = 18;
  /** Score for kills. */
  KILLS = 19;
  /** Score for barons. */
  BARONS = 20;
  /** Score for inhibitors. */
  INHIBITORS = 21;
  /** Score for dragons. */
  DRAGONS = 22;
  /** Score for towers. */
  TOWERS = 23;
  /** Score for roshans. */
  ROSHANS = 24;
  /** Score for barracks. */
  BARRACKS = 25;
  /** Score for touchdowns. */
  TOUCHDOWN = 26;
  /** Score for field goals. */
  FIELD_GOALS = 27;
  /** Score for hits. */
  HITS = 28;
  /** Score for errors. */
  ERRORS = 29;
  /** Score for sixes. */
  SIXES = 30;
  /** Score for fours. */
  FOURS = 31;
  /** Throw-ins in football. */
  THROW_INS = 32;
  /** Cricket: used to determine the first bowler/batter. */
  TOSS = 33;
  /** Cricket: number of wickets lost by the team. */
  WICKETS = 34;
}

/**
 * Enumeration of error codes.
 */
enum ErrorCode {
  /** Server is terminating. */
  SERVER_TERMINATING = 0;
  /** Authentication failed. */
  AUTHENTICATION_FAILED = 1;
  /** Client's IP address is not whitelisted. */
  IP_NOT_WHITELISTED = 2;
  /** Subscription expired. */
  SUBSCRIPTION_EXPIRED = 3;
  /** Requested feed is not included in the subscription. */
  REQUESTED_FEED_IS_NOT_INCLUDED_IN_SUBSCRIPTION = 4;
  /**
   * Client is sending too many messages.
   */
  TOO_MANY_REQUESTS = 5;
  /**
   * Client is not consuming messages fast enough to catch up with the feed.
   */
  SLOW_CONSUMER = 6;
  /**
   * Client is not sending Acknowledge messages.
   */
  NO_ACKNOWLEDGE_RECEIVED = 7;
}
